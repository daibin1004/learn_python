'''
6-3.排序
(a)输入一串数字、并从大到小排列之。
(b)跟a一样。不过要用字典序从大到小排列。
6-4.算术。更新上一章里面你的得分测试练习方案，把测试得分放到一个列表中去。你的代码应该
可以计算出一个平均分，见练习2-9和练习5-3。
6-5.字符串
(a)更新你在练习 2-7里面的方案，使之可以每次向前向后都显示一个字符串的一个字符。
(b)通过扫描来判断两个字符串是否匹配(不能使用比较操作符或者cmpO)内建函数)。
附加题:在你的方案里加入大小写区分。
(c)判断一个字符串是否重现(后面跟前面的一致)。附加题:在处理除了严格的回文之外，
加入对例如控制符号和空格的支持。
(d)接受一个字符，在其后面加一个反向的拷贝，构成一个回文字符串。
6-6.字符串。创建一个 string.stripO的替代函数:接受一个字符串，去掉它前面和后面的空格(如
果使用 string.*strip()函数那本练习就没有意义了)
6-7.调试。看一下在例6.5 中给出的代码(buggy.py)
(a)研究这段代码并描述这段代码想做什么。在所有的(#)处都要填写你的注释。
(b)
这个程序有一个很大的问题，比如输入 6、12、20、30、等它会死掉。实际上它不能处理
D100
任何的偶数，找出原因。
(c)修正(b)中提出的问题。
6-8.列表。给出一个整型值，返回代表该值的英文，比如输入89返回“eight-nine”。附加题:能够
返回符合英文语法规则的形式，比如输入“89”返回“eighty-nine”。本练习中的值限定在 0~
1 000。
6-9.转换。为练习5-13 写一个姊妹函数，接受分钟数，返回小时数和分钟数。总时间不变，并且
要求小时数尽可能大。
6-10.字符串。写一个函数，返回一个跟输入字符串相似的字符串，要求字符串的大小写反转。比如，
输入“Mr.Ed”，应该返回“mR.eD”作为输出。
例6.5 有bug 的程序(buggy.py)
这是一个用于练习6-7的程序，判断这个程序是干什么的，在“#”处添加你的注释，找出其中
的错误，并修改之。
#!/usr/bin/env python
num str=rawinput("Enteranumber:)
num num =int(num str)
fac list=range(l,num num+l)
print "BEFORE:"，"fac list"
i=0
while i < len(fac list):
    if num numgfac list[i]== 0:
        del fac list[i]
    i=i+ 1

print"AFTER":"fac list'

6-11.转换。
(a)创建一个从整型到IP地址的转换程序，如下格式;WWW.XXX.YYY.ZZZ
(b)更新你的程序，使之可以逆转换。
6-12.字符串。
(a)创建一个名字为 fndchrO)的函数，函数声明如下。

def findchr(string, char)
findchrO)要在字符串 string中查找字符char，找到就返回该值的索引，否则返回-1。不能用
string.*findO或者 string.*indexO)函数和方法。
(b)创建另一个叫 rfindchrO)的函数，査找字符 char 最后一次出现的位置。它跟 findchrO)工作类
似，不过它是从字符串的最后开始向前查找的。
(c)创建第三个函数，名字叫subchr0)，声明如下。
def subchr(string,origchar，newchar)
subchrO跟 findchrO类似，不同的是，如果找到匹配的字符就用新的字符替换原先字符。返回修
改后的字符串。
6-13.字符串.sting 模块包含三个函数，atoi0、atol0和 atof0，它们分别负责把字符串转换成整型、
长整型和浮点型数字。从 Python1.5起，Python 的内建函数int0、longO)、float()也可以做相同
的事了，complexO)函数可以把字符串转换成复数(然而1.5之前，这些转换函数只能工作于数
字之上)。
string 模块中并没有实现一个 atocO函数，那么你来实现一个 atocO，接受单个字符串做参数输
入，一个表示复数的字符串，例如-1.23e+4-5.67,返回相应的复数对象。你不能用 eval()函数，
但可以使用 complexO函数，而且你只能在如下的限制之下使用:complex():complex(real,imag
的 real和 imag 都必须是浮点值。
6-14.随机数。设计一个“石头、剪子、布”游戏，有时又叫“Rochambeau”，你小时候可能玩过
下面是规则。你和你的对手，在同一时间做出特定的手势，必须是下面一种:石头、剪子、布。
胜利者从下面的规则中产生，这个规则本身是个悖论。
(a)布包石头。
(b)石头砸剪子。
(c)剪子剪破布。在你的计算机版本中，用户输入她/他的选项，计算机找一个随机选项，然
后由你的程序来决定一个胜利者或者平手。注意:最好的算法是尽量少的使用if语句。


6-15.转换。
(a)给出两个可识别格式的日期，比如 MMDD/YY或者 DD/MM/YY 格式，计算出两个日期
间的天数。
(b)给出一个人的生日，计算从此人出生到现在的天数，包括所有的闰月。
(c)还是上面的例子，计算出到此人下次过生日还有多少天。
6-16.矩阵。处理矩阵 M和N的加和乘操作。
6-17.方法。实现一个叫 myPop0的函数，功能类似于列表的 popO方法，用一个列表作为输入，移除
列表的最新一个元素，并返回它。
6-18.zipO)内建函数。在6.13.2节里面关于 zipO函数的例子中，zip(fn,in)返回的是什么?
6-19.多列输出。有任意项的序列或者其他容器，把它们等距离分列显示。由调用者提供数据和输出格
式。例如，如果你传入100个项并定义3列输出，按照需要的模式显示这些数据。这种情况下，
应该是两列显示 33个项，最后一列显示34个。你可以让用户来选择水平排序或者垂直排序。

'''